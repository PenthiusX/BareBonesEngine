<?xml version="1.0"?>
<doc>
    <assembly>
        "FireWrap.Net"
    </assembly>
    <members>
        <member name="M:AlliedVisionTec.FireWrap.FireWrap_Convert.Convert(System.Drawing.Bitmap,System.Byte[],System.UInt32,System.UInt32,AlliedVisionTec.FireWrap.enColorMode,AlliedVisionTec.FireWrap.enBayerPattern)">
            <summary>.static convert function</summary>
            <param name="dst"> destination Bitmap</param>
            <param name="src"> source frame array</param>
            <param name="w"> width in pixel</param>
            <param name="h"> height in pixel</param>
            <param name="ColorCode"> color code</param>
            <param name="bp"> bayer pattern of the camera</param>
        </member>
        <member name="T:AlliedVisionTec.FireWrap.FireWrap_Convert">
            <summary>convert camera data to Bitamp</summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FireWrap_Broadcast.WriteBlock(AlliedVisionTec.FireWrap.FireWrap_Camera!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32,System.Byte[])">
            <summary>broadcast a write register block to all cameras on the same card</summary>
            <param name="Cam"> camera to identify the card to use</param>
            <param name="Address"> register start address</param>
            <param name="Data"> values to write</param>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FireWrap_Broadcast.WriteRegister(AlliedVisionTec.FireWrap.FireWrap_Camera!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32,System.UInt32)">
            <summary>broadcast a write register to all cameras on the same card</summary>
            <param name="Cam"> camera to identify the card to use</param>
            <param name="Address"> register address</param>
            <param name="Value"> value to write</param>
        </member>
        <member name="T:AlliedVisionTec.FireWrap.FireWrap_Broadcast">
            <summary>Send data to all devices on a bus the given camera is connected to</summary>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FireWrap_Camera.DeviceAll">
            <value>DeviceAll human readable camera model and vendor</value>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FireWrap_Camera.DeviceVendor">
            <value>DeviceVendor human readable camera vendor</value>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FireWrap_Camera.DeviceModel">
            <value>DeviceModel human readable camera model</value>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FireWrap_Camera.GetContext">
            <summary>get the context used by Connect</summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FireWrap_Camera.DiscardFrames">
            <summary>discards all frames</summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FireWrap_Camera.PutFrame(AlliedVisionTec.FireWrap.FGFrame)">
            <summary>returning a frame back to FireGrab </summary>
            <param name="Frame"> the frame for fireGrab  to fill again</param>
            <remarks>after this call Frame will not be valid anymore</remarks>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FireWrap_Camera.GetFrame(AlliedVisionTec.FireWrap.FGFrame,System.UInt32)">
            <summary>get a received frame from the camera</summary>
            <param name="Frame"> received frame and information <remarks> do not forget to check for valid and last frame</remarks></param>
            <param name="TimeoutInMs"> timeout to wait for a image to be acquired in mili seconds</param>
            <remarks>if you recive a <see cref="E:AlliedVisionTec.FireWrap.FireWrap_CtrlCenter.OnFrameReady" /> notification you get a frame from FireGrab
the FGFrame returned encapsulates the FireGrab Frame and it has to be given back to FireGrab as fast as possible
</remarks>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FireWrap_Camera.StopDevice">
            <summary>stop  the image aquisition of the camera</summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FireWrap_Camera.StartDevice">
            <summary>start the image aquisition of camera for burst count images </summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FireWrap_Camera.FreeUserBuffers">
            <summary>Frees user assigned buffers</summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FireWrap_Camera.AssignUserBuffers(System.UInt32,System.UInt32)">
            <summary>User supplied Frame allocation</summary>
            <remarks> call before <see cref="M:AlliedVisionTec.FireWrap.FireWrap_Camera.OpenCapture" /></remarks>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FireWrap_Camera.CloseCapture">
            <summary>closes the recive logic in FireGrab</summary>
            <remarks> all buffers and allocated bus resources are freed</remarks>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FireWrap_Camera.OpenCapture">
            <summary>prepare the recive logic in FireGrab</summary>
            <remarks> allocates buffers and iso channel and bandwidth</remarks>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FireWrap_Camera.GetCurrentImageFormat(System.UInt32@,System.UInt32@,AlliedVisionTec.FireWrap.enColorMode@)">
            <summary> retrieve the current camera image format</summary>
            <param name="Width"> width of the image in pixel </param>
            <param name="Height"> height of the image in pixel</param>
            <param name="ColorFormat"> color format <see cref="T:AlliedVisionTec.FireWrap.enColorMode" /></param>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FireWrap_Camera.GetCurrentImageFormat(System.UInt32@,System.UInt32@)">
            <summary>retrieve the current camera image format</summary>
            <param name="Width"> width of the image in pixel </param>
            <param name="Height"> height of the image in pixel</param>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FireWrap_Camera.SetDCAMFormat(AlliedVisionTec.FireWrap.FGFormat)">
            <summary>set DCam format to FireGrab</summary>
            <param name="fgformat"> DCam format to set </param>
            <remarks> format will be activated when camera starts</remarks>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FireWrap_Camera.GetDCAMFormat(AlliedVisionTec.FireWrap.FGFormat@)">
            <summary>get current DCam format</summary>
            <param name="fgformat"> return current DCam format </param>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FireWrap_Camera.GetSupportedDCAMFormats(AlliedVisionTec.FireWrap.FGFormat[]@)">
            <summary>get camera supported DCam formats</summary>
            <param name="formats"> returns an array of supported formats </param>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FireWrap_Camera.GetParameterInfo(&lt;unknown type&gt;,AlliedVisionTec.FireWrap.FGPInfo)">
            <summary>get parameter information defined by FireGrab</summary>
            <param name="Which"> parameter to get information about </param>
            <param name="Info"> out information about the parameter</param>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FireWrap_Camera.GetParameterInfo(System.UInt16,AlliedVisionTec.FireWrap.FGPInfo)">
            <summary>get parameter information defined by FireGrab</summary>
            <param name="Which"> numerical representation of <see cref="T:AlliedVisionTec.FireWrap.enFGParameter" /></param>
            <param name="Info"> out information about the parameter</param>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FireWrap_Camera.GetParameter(&lt;unknown type&gt;,System.UInt32@)">
            <summary>get parameter defined by FireGrab</summary>
            <param name="Which">parameter to read </param>
            <param name="Value">out value read from camera </param>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FireWrap_Camera.GetParameter(System.UInt16,System.UInt32@)">
            <summary>get parameter defined by FireGrab</summary>
            <param name="Which"> numerical representation of <see cref="T:AlliedVisionTec.FireWrap.enFGParameter" /></param>
            <param name="Value"> out value read from camera</param>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FireWrap_Camera.SetParameter(&lt;unknown type&gt;,&lt;unknown type&gt;)">
            <summary>set parameter state defined by FireGrab</summary>
            <param name="Which">parameter to set </param>
            <param name="State"> state to set(on/off auto/ one push)</param>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FireWrap_Camera.SetParameter(&lt;unknown type&gt;,System.UInt32)">
            <summary>set parameter defined by FireGrab</summary>
            <param name="Which"> parameter to set</param>
            <param name="Value"> value  to set in INTEL byte order</param>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FireWrap_Camera.SetParameter(System.UInt16,System.UInt32)">
            <summary>set parameter defined by FireGrap</summary>
            <param name="Which"> numerical equivalent to enFGParameter </param>
            <param name="Value"> value to set INTEL byte order</param>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FireWrap_Camera.Disconnect">
            <summary>disconnecting the object from a real camera</summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FireWrap_Camera.Connect(AlliedVisionTec.FireWrap.FGUIntHL)">
            <summary>connects this object to a real camera object on the firewire bus</summary>
            <param name="Guid"> the unique identifier of the camera, obtained from FGNodeInfo class </param>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FireWrap_Camera.ReadBlock(System.UInt32,System.Byte[])">
            <summary>read a sequencial range of memory from camera</summary>
            <param name="Address"> start address to read from </param>
            <param name="Data"> data block to read to in FireWire byte order big endian</param>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FireWrap_Camera.WriteBlock(System.UInt32,System.Byte[])">
            <summary>writes a sequencial range of memory  to the camera</summary>
            <param name="Address"> start register address</param>
            <param name="Data"> data block to write in FireWire byte order big endian</param>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FireWrap_Camera.ReadRegister(System.UInt32,System.UInt32@)">
            <summary>read register from camera</summary>
            <param name="Address"> 32bit part of the camera register address</param>
            <param name="Value">value storage to read the register to, byte order is INTEL </param>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FireWrap_Camera.WriteRegister(System.UInt32,System.UInt32)">
            <summary>writes to camera register</summary>
            <param name="Address"> address of register</param>
            <param name="Value"> value in INTEL byte order to write</param>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FireWrap_Camera.Equals(System.UInt32,System.UInt32)">
            <summary>Equals is true if low a,d high part of the camera guid match</summary>
            <remarks> the camera has a guid after being successful conneted</remarks>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FireWrap_Camera.Equals(System.Object)">
            <summary>Equals is true if a FGEventArg with the same guid or a camera with the same guid is passed</summary>
            <remarks> the camera has a guid after being successful connected</remarks>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FireWrap_Camera.Finalize">
            <summary>Finalize Dtor</summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FireWrap_Camera.Dispose">
            <summary>Dispose Dtor</summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FireWrap_Camera.#ctor">
            <summary>default Ctor</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.FireWrap_Camera.m_UserBuffer">
            <summary>private buffer for grabbing to user managed memory</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.FireWrap_Camera.m_Context">
            <summary>private calling context for callback</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.FireWrap_Camera.m_Camera">
            <summary>private FireGrabCamera</summary>
        </member>
        <member name="T:AlliedVisionTec.FireWrap.FireWrap_Camera">
            <summary>Wrapper class for Fire Grab Camera</summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FireWrap_CtrlCenter.Int_Callback(System.Void*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Void*)">
            <summary>native callback to capture FireGrab notifications</summary>
            <remarks> internal use not for the interface</remarks>
            <param name="pContext"> the calling context</param>
            <param name="wParam"> windows message like WPARAM</param>
            <param name="lParam"> windows message like LPARAM</param>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FireWrap_CtrlCenter.FGGetNodeList(AlliedVisionTec.FireWrap.FGNodeInfoContainer!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>retrives the nodelist of all the found cameras on the bus</summary>
            <param name="InfoContainer"> out container for current cameras enumerated by firegrab</param>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FireWrap_CtrlCenter.FGExitModule">
            <summary>Deinitializes the underlying FireGrab</summary>
            <remarks>has to be called<para> You must not call any function of FireWrap_Camera after this</para></remarks>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FireWrap_CtrlCenter.FGInitModule">
            <summary>Initialize the underlying FireGrab</summary>
            <remarks>Any call to FireWrap_camera hast to occure after this was called<para>From now one you will recive notifications </para><see cref="M:AlliedVisionTec.FireWrap.FireWrap_CtrlCenter.FireWrapEvent.#ctor(System.Object,System.IntPtr)" /></remarks>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FireWrap_CtrlCenter.GetInstance">
            <summary>get an object intance</summary>
        </member>
        <member name="E:AlliedVisionTec.FireWrap.FireWrap_CtrlCenter.OnBusReset">
            <summary>delegate will be called if a a bus reset occured</summary>
        </member>
        <member name="E:AlliedVisionTec.FireWrap.FireWrap_CtrlCenter.OnFrameReady">
            <summary>delegate will be called if a frame is ready for processing</summary>
        </member>
        <member name="E:AlliedVisionTec.FireWrap.FireWrap_CtrlCenter.OnErrorFollowUp">
            <summary>delegate will be called after an OnError occured and give special inforamtion</summary>
        </member>
        <member name="E:AlliedVisionTec.FireWrap.FireWrap_CtrlCenter.OnError">
            <summary>delegate will be called if some kind of error occured</summary>
        </member>
        <member name="E:AlliedVisionTec.FireWrap.FireWrap_CtrlCenter.OnNodeListChanged">
            <summary>delegate will be  called if the internal FireGrab node list has changed</summary>
        </member>
        <member name="T:AlliedVisionTec.FireWrap.FireWrap_CtrlCenter.FireWrapEvent">
            <summary>declaration of an event notification</summary>
            <remarks>code your Handler like this
<c>
    void main()
    {
        return;
    }
</c> // if code works in XML one day---
<para>public void OnNodeListChangedHandler(System.Object o, System.EventArgs arg)</para><para>{</para><para>    if (InvokeRequired)</para><para>    {</para><para>        Invoke(new FireWrap_CtrlCenter.FireWrapEvent(OnNodeListChangedHandler), new object[2] { o, arg });</para><para>    }</para><para>}</para></remarks>
            <remarks> register your notification before FGInitModul().
don't forget to check in your Handlers the need for Invoke. they are called from the underlying dll
</remarks>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FireWrap_CtrlCenter.#ctor">
            <summary>hidden default Ctor</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.FireWrap_CtrlCenter.m_Instance">
            <summary>the only instance of t his</summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FireWrap_CtrlCenter.#cctor">
            <summary>singleton Ctor</summary>
        </member>
        <member name="T:AlliedVisionTec.FireWrap.FireWrap_CtrlCenter">
            <summary>wrapping the C like FireGrab functions for init/DeInit Enumeration of the FireGrap API. </summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGFrame.CloneData(System.Byte[])">
            <summary>copies the frame from internal buffer to an array </summary>
            <remarks> important to call this soon, because after this the frame is  returned to FireGrab.the frame will be no longer valid </remarks>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FGFrame.EndCycleTime">
            <summary>bus time when frame stop was detected </summary>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FGFrame.BeginCycleTime">
            <summary>bus time when frame start was detected </summary>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FGFrame.RxTime">
            <summary>time the frame was resived</summary>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FGFrame.Length">
            <summary>length of the frame in bytes</summary>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FGFrame.Id">
            <summary>continuose identification of the frame</summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGFrame.IsDMAHalted">
            <summary>state of the dma</summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGFrame.IsLast">
            <summary>is there a frame left to get</summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGFrame.IsValid">
            <summary>is frame ok</summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGFrame.Dispose">
            <summary>Dispose Dtor</summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGFrame.#ctor(AlliedVisionTec.FireWrap.FGFrame!System.Runtime.CompilerServices.IsConst)">
            <summary>copy Ctor </summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGFrame.#ctor">
            <summary>default Ctor</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.FGFrame.m_Frame">
            <summary>unmanaged FGFrame only for access of unmanaged funtions to the data</summary>
        </member>
        <member name="T:AlliedVisionTec.FireWrap.FGFrame">
            <summary>Fire Grab Frame wrapper</summary>
        </member>
        <member name="T:AlliedVisionTec.FireWrap.FGErrorFollowUpEventArgs">
            <summary>event argument for error event follow up handler</summary>
        </member>
        <member name="T:AlliedVisionTec.FireWrap.FGErrorEventArgs">
            <summary>event argument for error event handler</summary>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FGEventArgs.High">
            <summary>access to the high part of the camera guid</summary>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FGEventArgs.Low">
            <summary>acces to the low part of the camera guid </summary>
        </member>
        <member name="T:AlliedVisionTec.FireWrap.FGEventArgs">
            <summary>from EventArgs deriven EventArg for the OnFrameReady Handler</summary>
            <remarks> OnFrameReady will recive just one object of this type.
It encapsulates the camera guid to identify the camera witch
triggered this event
</remarks>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGPInfo.GetTrigger_TriggerParameter">
            <summary />
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGPInfo.GetTrigger_TriggerMode">
            <summary>current trigger mode</summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGPInfo.GetTrigger_TriggerModeCap">
            <summary>Trigger has mode  capability </summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGPInfo.GetTrigger_TriggerSrc">
            <summary>courent trigger source </summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGPInfo.GetTrigger_TriggerSrcCap">
            <summary>Trigger has source capability</summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGPInfo.GetTrigger_InputState">
            <summary>current trigger input state</summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGPInfo.GetTrigger_ReadInputCap">
            <summary>Trigger has Input capability</summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGPInfo.GetTrigger_PolarityState">
            <summary>curent Trigger polarity state</summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGPInfo.GetTrigger_PolarityCap">
            <summary>Trigger has polarity capability</summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGPInfo.GetTrigger_OnOffState">
            <summary>current trigger on off state</summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGPInfo.GetTrigger_OnOffCap">
            <summary>Trigger has on off capability</summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGPInfo.GetTrigger_ReadOutCap">
            <summary>Trigger has read out capability</summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGPInfo.GetFeat_OnePushState">
            <summary>get current one push state </summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGPInfo.GetFeat_OnePushCap">
            <summary>feature has one push capability </summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGPInfo.GetFeat_AutoState">
            <summary>get current auto state </summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGPInfo.GetFeat_AutoCap">
            <summary>feature has the auto state </summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGPInfo.GetFeat_OnOffState">
            <summary>get the current on/off state </summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGPInfo.GetFeat_OnOffCap">
            <summary>feature has on/off state</summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGPInfo.GetFeat_ReadOutCap">
            <summary>can be  read</summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGPInfo.GetParameterType">
            <summary>get type of info </summary>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FGPInfo.Unit">
            <summary>if type E_INFO_FEATURE, the stepsize this feature has to be increast from min to max</summary>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FGPInfo.MaxValue">
            <summary>if type E_INFO_FEATURE,  this is the maximal value this feature can have</summary>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FGPInfo.MinValue">
            <summary>if type E_INFO_FEATURE,  this is the minimal value this feature can have</summary>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FGPInfo.IsValue">
            <summary>if type E_INFO_FEATURE, this is the current feature value </summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGPInfo.ToString">
            <summary>converting the info to a string</summary>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FGPInfo.Name">
            <summary>Info  type in human readable form</summary>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FGPInfo.Parameter">
            <summary>property Parameter gets and sets the Info type </summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.FGPInfo.m_Parameter">
            <summary>type</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.FGPInfo.m_Name">
            <summary>typename  </summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGPInfo.Finalize">
            <summary>Finalize Dtor</summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGPInfo.Dispose">
            <summary>Dispose Dtor</summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGPInfo.#ctor(AlliedVisionTec.FireWrap.FGPInfo)">
            <summary>copy ctor </summary>
            <param name="o"> object to make a copy from </param>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGPInfo.#ctor(&lt;unknown type&gt;)">
            <summary>ctor from type</summary>
            <param name="prm"> type of info to construct </param>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGPInfo.#ctor">
            <summary>default ctor </summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.FGPInfo.m_Info">
            <summary>unmanaged pointer to FGINFO structure</summary>
            <remarks> its exposed so it can be accessed easely by unmanaged reding code</remarks>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.FGPInfo.enInfoType.E_INFO_COLORFORMAT">
            <summary>parameter info for color format</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.FGPInfo.enInfoType.E_INFO_TRIGGER">
            <summary>parameter info for trigger</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.FGPInfo.enInfoType.E_INFO_FEATURE">
            <summary>parameter info for a feature</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.FGPInfo.enInfoType.E_INFO_INVALID">
            <summary>parameter info is not valid</summary>
        </member>
        <member name="T:AlliedVisionTec.FireWrap.FGPInfo.enInfoType">
            <summary>defines the type of info encapsulated inside FGInfo</summary>
        </member>
        <member name="T:AlliedVisionTec.FireWrap.FGPInfo">
            <summary>Fire Grab parameter Info struct</summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGNodeInfoContainer.FGGetNodeList">
            <summary>Reads the current nodelist from FireGrab and stores it internal</summary>
            <returns> FCE_NOTAVAILABLE on fail</returns>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGNodeInfoContainer.GetAt(AlliedVisionTec.FireWrap.FGNodeInfo,System.UInt32)">
            <summary>random access to the nodeinfo data</summary>
            <param name="Info"> returns a copy of the FGNodeInfo</param>
            <param name="Pos"> position in sequence </param>
            <returns> FCE_INPARAM on failure</returns>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGNodeInfoContainer.Size">
            <summary> count of the encapsulated nodeinfos  </summary>
            <returns> non negitive count of the found cameras</returns>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGNodeInfoContainer.op_Assign(AlliedVisionTec.FireWrap.FGNodeInfoContainer!System.Runtime.CompilerServices.IsConst!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>assignment operator</summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGNodeInfoContainer.Finalize">
            <summary>finalize Dtor </summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGNodeInfoContainer.Dispose">
            <summary>dispose Dtor</summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGNodeInfoContainer.#ctor(AlliedVisionTec.FireWrap.FGNodeInfoContainer!System.Runtime.CompilerServices.IsConst!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>copy Ctor </summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGNodeInfoContainer.#ctor">
            <summary>default Ctor </summary>
            <summary>node info container Ctor</summary>
        </member>
        <member name="T:AlliedVisionTec.FireWrap.FGNodeInfoContainer">
            <summary>random access container for bus nodes</summary>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.DisposableHelper.IsDisposed">
            <summary>State of Desposing </summary>
            <returns> true if object was already disposed</returns>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.DisposableHelper.#ctor">
            <summary>default ctor</summary>
        </member>
        <member name="T:AlliedVisionTec.FireWrap.DisposableHelper">
            <summary>supports the destruction and administration of unmanaged types</summary>
            <remarks> its meant to derive from this class to have the destruction facility</remarks>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FGErrorFlags.Snoop">
            <summary>Snoop</summary>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FGErrorFlags.IsoTx">
            <summary>Error in isochronouse transmission</summary>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FGErrorFlags.DataMovePort">
            <summary>Error din data mover port, (GP LYnx only)</summary>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FGErrorFlags.SelfId">
            <summary>Error while receiving SelfIds</summary>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FGErrorFlags.NoAccessInfo">
            <summary>No access info could be allocated while an external access occured</summary>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FGErrorFlags.AsyTxRestart">
            <summary>Error in asynchronous transmit state machine, transmission had to be restarted</summary>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FGErrorFlags.PCIAccess">
            <summary>Error while accessing pci bus</summary>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FGErrorFlags.AsyTxFiFoUnderflow">
            <summary>Asynchronouse transmit Fifo underflow (access to pci to slow)</summary>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FGErrorFlags.IsoTxFiFoUnderflow">
            <summary>Isochronouse transmit FiFo underflow (access to pci to slow)</summary>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FGErrorFlags.GenFiFoOverflow">
            <summary>General receive fiFo overflow (access to pci bus too slow)</summary>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FGErrorFlags.AsyncFiFoStuck">
            <summary>Asynchronouse transmit FiFo stuck</summary>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FGErrorFlags.TCodeUnknown">
            <summary>Packet with unknown tcode was received</summary>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FGErrorFlags.HeaderUnknown">
            <summary>Packet with unknown header was received</summary>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FGErrorFlags.PhyTimeout">
            <summary>The phy took to long to tranfer an information to the link layer chip</summary>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FGErrorFlags.AsyncTx">
            <summary>Error during asynchronouse transmission</summary>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FGErrorFlags.AsyncRx">
            <summary>Error during asynchronouse reception</summary>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FGErrorFlags.TxResponse">
            <summary>Could not send response for request ( read or write)</summary>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FGErrorFlags.IsoReceive">
            <summary>Unspecified isochronouse receive error</summary>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FGErrorFlags.IsoDMAPackAck">
            <summary>Isochronouse DMA reported error in packet ACK</summary>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FGErrorFlags.IsoRx7Halted">
            <summary>Isochronous DMA RXDMA7 had to be stopped</summary>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FGErrorFlags.IsoRx6Halted">
            <summary>Isochronous DMA RXDMA6 had to be stopped</summary>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FGErrorFlags.IsoRx5Halted">
            <summary>Isochronous DMA RXDMA5 had to be stopped</summary>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FGErrorFlags.IsoRx4Halted">
            <summary>Isochronous DMA RXDMA4 had to be stopped</summary>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FGErrorFlags.IsoRx3Halted">
            <summary>Isochronous DMA RXDMA3 had to be stopped</summary>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FGErrorFlags.IsoRx2Halted">
            <summary>Isochronous DMA RXDMA2 had to be stopped</summary>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FGErrorFlags.IsoRx1Halted">
            <summary>Isochronous DMA RXDMA1 had to be stopped</summary>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FGErrorFlags.IsoRx0Halted">
            <summary>Isochronous DMA RXDMA0 had to be stopped</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.FGNodeInfo.Busy">
            <summary>Busy state of the device</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.FGNodeInfo.NodeId">
            <summary>node id dependent on bus topologie</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.FGNodeInfo.CardNumber">
            <summary>Card number</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.FGNodeInfo.Guid">
            <summary>GUID of the device</summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGNodeInfo.#ctor(AlliedVisionTec.FireWrap.FGNodeInfo!System.Runtime.CompilerServices.IsConst)">
            <summary>copy Ctor from handle</summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGNodeInfo.#ctor(AlliedVisionTec.FireWrap.FGNodeInfo!System.Runtime.CompilerServices.IsConst!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>copy Ctor</summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGNodeInfo.#ctor">
            <summary>default Ctor</summary>
        </member>
        <member name="T:AlliedVisionTec.FireWrap.FGNodeInfo">
            <summary>Information about the enumerated bus nodes</summary>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FGUIntHL.High">
            <summary>get/set high part of the Guid</summary>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FGUIntHL.Low">
            <summary>get/set low part of the Guid</summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGUIntHL.#ctor(AlliedVisionTec.FireWrap.FGUIntHL!System.Runtime.CompilerServices.IsConst)">
            <summary>copy Ctor with handle</summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGUIntHL.#ctor(AlliedVisionTec.FireWrap.FGUIntHL!System.Runtime.CompilerServices.IsConst!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>copy Ctor</summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGUIntHL.#ctor(System.UInt32,System.UInt32)">
            <summary>Ctor from high and low part of a Guid</summary>
            <param name="low"> low part of the Guid</param>
            <param name="high"> high part of  the Guid</param>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGUIntHL.#ctor">
            <summary>default Ctor</summary>
        </member>
        <member name="T:AlliedVisionTec.FireWrap.FGUIntHL">
            <summary> wrapping the low and high part of a 64 bit integer</summary>
        </member>
        <member name="T:AlliedVisionTec.FireWrap.FGParameterMapper">
            <summary>map FireGrab parameter to string</summary>
        </member>
        <member name="T:AlliedVisionTec.FireWrap.enFGParameter">
            <summary>FireGrab defined parameters </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_CARDRESET">
            <summary>Do reset on card (for hard errors)</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_PACKETCOUNT">
            <summary>Read only: Packet count</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_LICENSEINFO">
            <summary>Query license information </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_CARD">
            <summary>Card number of this camera (set before connect)</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_CMDTIMEOUT">
            <summary>Global bus command timeout</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_BUSADDRESS">
            <summary>Exact bus address</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_R0C">
            <summary>Ring 0 call gate</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_DMAFLAGS">
            <summary>Flags for ISO DMA</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_DORESET">
            <summary>Reset camera</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_CYCLETIME">
            <summary>Read cycle time</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_ISOCHANNEL">
            <summary>Iso channel</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_CAMACCEPTDELAY">
            <summary>Delay after writing values</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_USEIRMFORCHN">
            <summary>Get channel over isochronous resource manager </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_RESIZE">
            <summary>Start/Stop resizing</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_DO_MULTIBUSTRIGGER">
            <summary>Broadcast trigger to multiple cards</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_DO_BUSTRIGGER">
            <summary>Broadcast trigger</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_DO_FASTTRIGGER">
            <summary>Fast trigger (no ACK)</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_IRMFREEBW">
            <summary>Read only: Free iso bytes for 400MBit</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_COLORFORMAT">
            <summary>Read only: Colorformat</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_FRAMEMEMORYSIZE">
            <summary>Read only: Frame buffer size</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_STARTIMMEDIATELY">
            <summary>Start bursting immediately</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_ADJUSTPARAMETERS">
            <summary>Adjust parameters or fail</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_USEIRMFORBW">
            <summary>Allocate bandwidth or not (IsoRscMgr)</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_FRAMEBUFFERCOUNT">
            <summary>Number of frame buffers</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_BURSTCOUNT">
            <summary>Number of images to produce</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_DMAMODE">
            <summary>DMA mode (continuous or limp)</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_PACKETSIZE">
            <summary>Packet size</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_YPOSITION">
            <summary>Image y position</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_XPOSITION">
            <summary>Image x position</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_YSIZE">
            <summary>Image YSize</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_XSIZE">
            <summary>Image XSize</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_PHYSPEED">
            <summary>Set speed for asy/iso</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_CAPTUREQUALITY">
            <summary>Quality</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_CAPTURESIZE">
            <summary>Size of capture</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_OPTICALFILTER">
            <summary>Filter</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_TILT">
            <summary>Tilt</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_PAN">
            <summary>Pan</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_ZOOM">
            <summary>Zoom</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_FRAMERATE">
            <summary>Frame rate</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_WHITESHD">
            <summary>Whiteshade</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_TRIGGERDLY">
            <summary>Delay of trigger</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_TRIGGER">
            <summary>Trigger</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_TEMPERATURE">
            <summary>Color temperature</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_FOCUS">
            <summary>Focus</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_IRIS">
            <summary>Iris</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_GAIN">
            <summary>Gain</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_SHUTTER">
            <summary>Shutter time</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_GAMMA">
            <summary>Set gamma</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_SATURATION">
            <summary>Set color saturation</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HUE">
            <summary>Set image hue</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_WHITEBALCR">
            <summary>Red</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_WHITEBALCB">
            <summary>Blue</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_SHARPNESS">
            <summary>Set image sharpness</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_AUTOEXPOSURE">
            <summary>Set auto exposure</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_BRIGHTNESS">
            <summary>Set image brightness</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_ENUMIMAGEFORMAT">
            <summary>Enumeration (Reset,Get)</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_IMAGEFORMAT">
            <summary>Compact image format</summary>
        </member>
        <member name="T:AlliedVisionTec.FireWrap.enFGParameterState">
            <summary>Enumeration for feature states </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_ONESHOT">
            <summary>parameter state one shot</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_AUTO">
            <summary>parameter state auto</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_OFF">
            <summary>parameter state off</summary>
        </member>
        <member name="T:AlliedVisionTec.FireWrap.enPhySpeed">
            <summary>Enumeration for physical speed </summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enPhySpeed.E_PHYSPEED_LAST">
            <summary>last dummy</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enPhySpeed.E_PHYSPEED_AUTO">
            <summary>phy speed auto ( api defined)</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enPhySpeed.E_PHYSPEED_800MBIT">
            <summary>phy speed 800mbit (S800)</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enPhySpeed.E_PHYSPEED_400MBIT">
            <summary>phy speed 400mbit (S400)</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enPhySpeed.E_PHYSPEED_200MBIT">
            <summary>phy speed 200mbit (S200)</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enPhySpeed.E_PHYSPEED_100MBIT">
            <summary>phy speed 100mbit (S100)</summary>
        </member>
        <member name="T:AlliedVisionTec.FireWrap.enBayerPattern">
            <summary>Enumeration for Bayer pattern </summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enBayerPattern.E_BAYERPATTER_LAST">
            <summary>last dummy</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enBayerPattern.E_BAYERPATTER_GBRG">
            <summary>GBRG bayer pattern</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enBayerPattern.E_BAYERPATTER_BGGR">
            <summary>BGGR bayer pattern</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enBayerPattern.E_BAYERPATTER_GRBG">
            <summary>GRBG bayer pattern</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enBayerPattern.E_BAYERPATTER_RGGB">
            <summary>RGGB bayer pattern</summary>
        </member>
        <member name="T:AlliedVisionTec.FireWrap.enDMA">
            <summary>Enumeration for DMA mode </summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enDMA.E_DMA_LAST">
            <summary>last dummy</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enDMA.E_DMA_REPLACE">
            <summary>replace mode</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enDMA.E_DMA_LIMP">
            <summary>limp mode</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enDMA.E_DMA_CONTINOUS">
            <summary>continous mode</summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGDCAMFreeFormat.ToString">
            <summary>serializing to string</summary>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FGDCAMFreeFormat.ColorCode">
            <value>property for dcam color code</value>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FGDCAMFreeFormat.Mode">
            <value>property for dcam mode</value>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FGDCAMFreeFormat.Format">
            <value>property for dcam format</value>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGDCAMFreeFormat.Equals(System.Object)">
            <summary>compare to other formats</summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGDCAMFreeFormat.#ctor(System.UInt32,System.UInt32,AlliedVisionTec.FireWrap.enColorMode)">
            <summary>ctor from dcam format,mode and color code</summary>
        </member>
        <member name="T:AlliedVisionTec.FireWrap.FGDCAMFreeFormat">
            <summary>fire grab freee form format</summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGDCAMFixedFormat.ToString">
            <summary>serializing to string</summary>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FGDCAMFixedFormat.FrameRate">
            <value>property for dcam frame rate</value>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FGDCAMFixedFormat.Mode">
            <value>property for dcam mode</value>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FGDCAMFixedFormat.Format">
            <value>property for dcam format</value>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGDCAMFixedFormat.Equals(System.Object)">
            <summary>compare formats</summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGDCAMFixedFormat.#ctor(System.UInt32,System.UInt32,AlliedVisionTec.FireWrap.enFrameRate)">
            <summary>ctor from format mode and frame rate</summary>
            <param name="format"> DCam format to use</param>
            <param name="mode"> DCam mode to use</param>
            <param name="frame_rate"> DCam frame_rate to use</param>
        </member>
        <member name="T:AlliedVisionTec.FireWrap.FGDCAMFixedFormat">
            <summary>IIDC defined fixed formats with format, mode and frame rate</summary>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FGFormat.FormatType">
            <summary>determines the format type </summary>
        </member>
        <member name="P:AlliedVisionTec.FireWrap.FGFormat.PrintShortForm">
            <summary>controls how the format is printed</summary>
            <remarks>set true for ComboBoxes </remarks>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGFormat.ToString">
            <summary>converts format to string </summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.FGFormat.#ctor">
            <summary>default ctor</summary>
        </member>
        <member name="T:AlliedVisionTec.FireWrap.FGFormat.enFormatType">
            <summary>DCam format type</summary>
        </member>
        <member name="T:AlliedVisionTec.FireWrap.FGFormat">
            <summary>base class for DCam format</summary>
        </member>
        <member name="T:AlliedVisionTec.FireWrap.enFrameRate">
            <summary>Enumeration for frame rates </summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enFrameRate.E_FRAMERATE_LAST">
            <summary>last unused</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enFrameRate.E_FRAMERATE_240">
            <summary>240 frames per second</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enFrameRate.E_FRAMERATE_120">
            <summary>120 frames per second</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enFrameRate.E_FRAMERATE_60">
            <summary>60 frames per second</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enFrameRate.E_FRAMERATE_30">
            <summary>30 frames per second</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enFrameRate.E_FRAMERATE_15">
            <summary>15 frames per second</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enFrameRate.E_FRAMERATE_7_5">
            <summary>7.5 frames per second </summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enFrameRate.E_FRAMERATE_3_75">
            <summary>3.75 frames per second</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enFrameRate.E_FRAMERATE_1_875">
            <summary>1.875 frames per second</summary>
        </member>
        <member name="T:AlliedVisionTec.FireWrap.enColorMode">
            <summary>Enumeration for color modes</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enColorMode.E_CCOLORMODE_LAST">
            <summary>last unused</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enColorMode.E_CCOLORMODE_AVT_RAW12">
            <summary>two pixels in three bytes,::E_CCOLORMODE_AVT_MONO12</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enColorMode.E_CCOLORMODE_AVT_SRGB12">
            <summary>12 SRGB unused</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enColorMode.E_CCOLORMODE_AVT_SMONO12">
            <summary>E_CCOLORMODE_AVT_MONO12</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enColorMode.E_CCOLORMODE_AVT_RGB12">
            <summary>12 bit RGB unused</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enColorMode.E_CCOLORMODE_AVT_MONO12">
            <summary>two pixels in three bytes</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enColorMode.E_CCOLORMODE_AVT_MONOB">
            <summary>AVT Mono BLue channel</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enColorMode.E_CCOLORMODE_AVT_MONOG">
            <summary>AVT Mono Green channel</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enColorMode.E_CCOLORMODE_AVT_MONOR">
            <summary>AVT Mono Red channel</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enColorMode.E_CCOLORMODE_RAW16">
            <summary>RAW 16bit</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enColorMode.E_CCOLORMODE_RAW8">
            <summary>RAW 8bit</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enColorMode.E_CCOLORMODE_SRGB16">
            <summary>sRGB 16bit</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enColorMode.E_CCOLORMODE_SY16">
            <summary>sMono 16bit</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enColorMode.E_CCOLORMODE_RGB16">
            <summary>RGB 16bit</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enColorMode.E_CCOLORMODE_Y16">
            <summary>Mono 16bit</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enColorMode.E_CCOLORMODE_RGB8">
            <summary>RGB 8bit</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enColorMode.E_CCOLORMODE_YUV444">
            <summary>YUV 444</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enColorMode.E_CCOLORMODE_YUV422">
            <summary>YUV 422</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enColorMode.E_CCOLORMODE_YUV411">
            <summary>YUV 411</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enColorMode.E_CCOLORMODE_Y8">
            <summary>Mono 8bit</summary>
        </member>
        <member name="T:AlliedVisionTec.FireWrap.enFGResolution">
            <summary>Enumeration for resolutions </summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enFGResolution.E_RES_LAST">
            <summary>last unused</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enFGResolution.E_RES_SCALABLE">
            <summary>format 7 scaleable</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enFGResolution.E_RES_1600_1200">
            <summary>1600 x 1200</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enFGResolution.E_RES_1280_960">
            <summary>1280 x 960</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enFGResolution.E_RES_1024_768">
            <summary>1024 x 768</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enFGResolution.E_RES_800_600">
            <summary>800 x 600</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enFGResolution.E_RES_640_480">
            <summary>640 x 480</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enFGResolution.E_RES_320_240">
            <summary>320 x 240</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enFGResolution.E_RES_160_120">
            <summary>160 x 120</summary>
        </member>
        <member name="T:AlliedVisionTec.FireWrap.enFGLicenseType">
            <summary>FireGrab license type</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enFGLicenseType.E_FRAMELIMITED">
            <summary>Limited by frames</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enFGLicenseType.E_DEVICE">
            <summary>Device specific</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enFGLicenseType.E_DATELIMITED">
            <summary>Expires with date</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enFGLicenseType.E_VENDOR">
            <summary>Vendor global</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enFGLicenseType.E_ETHERNET">
            <summary>Ethernet adapter</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enFGLicenseType.E_HARDDISK">
            <summary>Hard disk</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enFGLicenseType.E_CARDGUID">
            <summary>Firewire card</summary>
        </member>
        <member name="F:AlliedVisionTec.FireWrap.enFGLicenseType.E_NOLICENSE">
            <summary>No license</summary>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.ResultMapper.MapFlags(System.UInt32)">
            <summary>map FireGrab Error Flags</summary>
            <param name="Value"> Result ot map </param>
        </member>
        <member name="M:AlliedVisionTec.FireWrap.ResultMapper.Map(System.UInt32)">
            <summary>map FireGrab Results </summary>
            <param name="Value"> Result ot map </param>
        </member>
        <member name="T:AlliedVisionTec.FireWrap.ResultMapper">
            <summary>Map FireGrab Results to enFireWrapResult enum</summary>
        </member>
        <member name="T:AlliedVisionTec.FireWrap.enFireWrapFlags">
            <summary>enum for FireGrab error flags</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALERF_SNOOP">
            <summary>Snoop error</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALERF_ISOTX">
            <summary>Iso TX error</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALERF_DMPORT">
            <summary>Data mover port error</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALERF_SELFID">
            <summary>Error within SelfId packet</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALERF_NOACCESSINFO">
            <summary>Ext. access not stored</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALERF_ASYRXRESTART">
            <summary>Asy. Rx DMA was restarted</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALERF_PCIERROR">
            <summary>Error accessing PCI-Bus</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALERF_ATFUNDERFLOW">
            <summary>Asynchr. Tx underflow</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALERF_ITFUNDERFLOW">
            <summary>Isochr. Tx underflow</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALERF_GRFOVERFLOW">
            <summary>General rx fifo overflow</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALERF_ATSTUCK">
            <summary>Asynchr. transm. stuck</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALERF_TCERROR">
            <summary>Transactioncode error</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALERF_HDRERROR">
            <summary>Unknown header received</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALERF_PHYTIMEOUT">
            <summary>Timeout in phy</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALERF_ASYTX">
            <summary>Asynchronous transmission</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALERF_ASYRX">
            <summary>Asynchronous receiption</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALERF_TXRESPONSE">
            <summary>Error sending response</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALERF_ISORX">
            <summary>Unspecified ISO error</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALERF_ISORXACK">
            <summary>Error in iso rx ack code</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALERF_RXHLTISO7">
            <summary>ISO-Channel 7 rx halted</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALERF_RXHLTISO6">
            <summary>ISO-Channel 6 rx halted</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALERF_RXHLTISO5">
            <summary>ISO-Channel 5 rx halted</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALERF_RXHLTISO4">
            <summary>ISO-Channel 4 rx halted</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALERF_RXHLTISO3">
            <summary>ISO-Channel 3 rx halted</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALERF_RXHLTISO2">
            <summary>ISO-Channel 2 rx halted</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALERF_RXHLTISO1">
            <summary>ISO-Channel 1 rx halted</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALERF_RXHLTISO0">
            <summary>ISO-Channel 0 rx halted</summary>
        </member>
        <member name="T:AlliedVisionTec.FireWrap.enFireWrapResult">
            <summary>map FireGrab Results to enum</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_UNKNOWN">
            <summary>unexpected </summary>
            <summary>unknown error flag</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_NET_NO_BUFFERS_ASSIGNED">
            <summary>returned when no user buffer have been assigned</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_FCE_ADJUSTED">
            <summary>A pararmeter had to be adjusted </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_FCE_NOTCONNECTED">
            <summary>Not connected to target </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_FCE_NOTAVAILABLE">
            <summary>Requested function not available </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_FCE_NOMEM">
            <summary>No memory </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_FCE_PARTIAL">
            <summary>Partial info. copied </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_FCE_NODEADDRESS">
            <summary>Wrong nodeaddress </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_FCE_DRVVERSION">
            <summary>Driver has wrong version </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_FCE_INSTALLERROR">
            <summary>Installation error </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_FCE_STARTERROR">
            <summary>Couldn't start </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_FCE_DRVRUNNING">
            <summary>Driver runs already </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_FCE_NOTIMPLEMENTED">
            <summary>Function not implemented </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_FCE_INVALIDHANDLE">
            <summary>Wrong handle </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_FCE_DRVRETURNLENGTH">
            <summary>Wrong length return data </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_FCE_IOCTL">
            <summary>Error DevIoCtl </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_FCE_WINERROR">
            <summary>Internal Windows error </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_FCE_CREATEDEVICE">
            <summary>Error creating WinDevice </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_FCE_INPARMS">
            <summary>Parameter error </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_FCE_MISSINGBUFFERS">
            <summary>Don't have buffers </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_FCE_DRVNOTINSTALLED">
            <summary>Driver not installed </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_FCE_NODETAILS">
            <summary>No details </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_FCE_NOTOPENED">
            <summary>Need open before </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_FCE_ALREADYOPENED">
            <summary>Something already opened </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALER_DMAHALTED">
            <summary>DMA halted </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALER_NOBUSRESOURCES">
            <summary>No ISO resources available </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALER_REMOVED">
            <summary>Target was removed </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALER_UNEXPECTED">
            <summary>Unexpected value </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALER_NOBUSMANAGER">
            <summary>No BusManager present </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALER_NOISOMANAGER">
            <summary>No IsoManager present </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALER_GENERATIONCNT">
            <summary>Bus reset in between </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALER_NOTLOCKED">
            <summary>Memory is not locked </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALER_CANCELLED">
            <summary>Cancelled </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALER_NOTIMPLEMENTED">
            <summary>Not implemented </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALER_HARDWARE">
            <summary>Hardware error </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALER_CHIPVERSION">
            <summary>Unrecognized chipversion </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALER_INPARMS">
            <summary>Input parameter range </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALER_PENDING">
            <summary>Something still pending </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALER_RCODEOTHER">
            <summary>RCode not RCODE_COMPLETE </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALER_NOLICENSE">
            <summary>No license </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALER_NOBUSRESET">
            <summary>Error waiting for busreset </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALER_NOIRQ">
            <summary>Interruptinstallerror </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALER_NOACK">
            <summary>Didn't get acknowledge </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALER_NODATA">
            <summary>No data available </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALER_NORESOURCES">
            <summary>No resources available </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALER_BUSY">
            <summary>Busy at the moment </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALER_NOTSTARTED">
            <summary>Not started </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALER_ALREADYSTARTED">
            <summary>Something is started </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALER_TIMEOUT">
            <summary>Timeout </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALER_MODE">
            <summary>Not allowed in this mode </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALER_NOMEN">
            <summary>Not enough memory </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALER_NONTDEVICE">
            <summary>No logical Device </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_HALER_NOCARD">
            <summary>Card is not present </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.E_NOERROR">
            <summary>operation completet successful</summary>
        </member>
    </members>
</doc>